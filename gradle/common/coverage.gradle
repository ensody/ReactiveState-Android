ext.trackCoverage = { enableTestCoverage ->
    apply plugin: 'jacoco'

    tasks.withType(Test) {
        jacoco.includeNoLocationClasses = true
        jacoco.excludes = ['jdk.internal.*']
    }

    jacoco {
        toolVersion = "0.8.7"
    }

    def isMultiplatform = ["androidMain", "jvmMain", "commonMain"].any { project.file("src/$it").exists() }
    def isAndroidProject = ["main", "androidMain"].any { project.file("src/$it/AndroidManifest.xml").exists() }
    def hasInstrumentationTests = isAndroidProject &&
        project.file(isMultiplatform ? 'src/androidUITest' : 'src/androidTest').exists()

    if (isAndroidProject) {
        android {
            buildTypes {
                debug {
                    testCoverageEnabled = enableTestCoverage
                }
            }

            testOptions {
                execution 'ANDROIDX_TEST_ORCHESTRATOR'
                animationsDisabled true
            }
        }
    }

    def androidTaskDeps = ['testDebugUnitTest']
    if (hasInstrumentationTests) {
        androidTaskDeps.add('createDebugCoverageReport')
    }
    if (isMultiplatform) {
        androidTaskDeps.add("jvmTest")
    }
    def taskDeps = isAndroidProject ? androidTaskDeps : [isMultiplatform ? "jvmTest" : "test"]
    task jacocoTestReportDefault(type: JacocoReport, dependsOn: taskDeps, group: 'verification') {
        reports {
            xml.enabled = true
            html.enabled = true
        }

        def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
        ]

        sourceDirectories.setFrom(files([
            "$project.projectDir/src/androidMain/kotlin",
            "$project.projectDir/src/jvmMain/kotlin",
            "$project.projectDir/src/commonMain/kotlin",
            "$project.projectDir/src/main/kotlin",
            "$project.projectDir/src/main/java",
        ]))
        classDirectories.setFrom(files([
            !isMultiplatform && isAndroidProject ?
                fileTree(dir: "$project.buildDir/intermediates/javac/debug", excludes: fileFilter)
                    + fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: fileFilter)
                    + fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
                : fileTree(dir: "$project.buildDir/classes/kotlin/jvm/main")
        ]))
        executionData.setFrom(fileTree(dir: project.buildDir,
            includes: isAndroidProject ?
                ['jacoco/testDebugUnitTest.exec', 'jacoco/jvmTest.exec', 'jacoco/test.exec', 'outputs/code_coverage/debugAndroidTest/connected/**/*.ec']
                : ['jacoco/jvmTest.exec', 'jacoco/test.exec'],
        ))
    }
}

ext.verifyCoverage = { minCoverage ->
    task jacocoTestCoverageVerificationDefault(type: JacocoCoverageVerification, group: 'verification') {
        executionData { project.fileTree(dir: "$project.buildDir", include: 'jacoco/**/*.exec') }

        violationRules {
            rule {
                limit {
                    minimum = minCoverage
                }
            }
        }
    }
}
