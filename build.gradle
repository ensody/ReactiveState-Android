buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.2.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.5.0"
    }
}

plugins {
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
    id "pl.allegro.tech.build.axion-release" version "1.12.1"
    id "org.jetbrains.dokka" version "1.4.32"
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

def isOnCI = System.getenv('RUNNING_ON_CI') == 'true'

scmVersion {
    ignoreUncommittedChanges = isOnCI
    useHighestVersion = true
    tag {
        prefix = 'v'
        versionSeparator = ""
        deserialize = { tag, position, String tagName ->
            def result = tagName.substring(1)
            while (result.count(".") < 2) {
                result += ".0"
            }
            result
        }
    }
}
version = scmVersion.version
println("Version: $version")

apply from: "$rootDir/secrets.gradle"
def publicationUsername = secrets.getProperty("publication.username") ?: System.getenv("PUBLICATION_USERNAME")
def publicationPassword = secrets.getProperty("publication.password") ?: System.getenv("PUBLICATION_PASSWORD")

// Base package setup
group "com.ensody.reactivestate"
subprojects {
    group rootProject.group
    version = rootProject.version

    def isAndroidProject = ["main", "androidMain"].any { project.file("src/$it/AndroidManifest.xml").exists() }
    def isMultiplatform = ["androidMain", "jvmMain", "commonMain"].any { project.file("src/$it").exists() }
    def isPlatformProject = project.name.endsWith("-bom")
    def isTestProject = project.name.endsWith("-test")

    if (isPlatformProject) {
        apply from: "$rootDir/dependencies.gradle"
    } else {
        if (isAndroidProject) {
            apply from: "$rootDir/gradle/common/android-library.gradle"
        }
        if (isMultiplatform) {
            apply from: "$rootDir/gradle/common/kotlin-library.gradle"
            kotlinLibrary(
                kotlinCompilerArgs: [
                    "-Xopt-in=kotlin.RequiresOptIn",
                    "-Xopt-in=com.ensody.reactivestate.ExperimentalReactiveStateApi",
                ],
            )

            kotlin {
                jvm()

                if (isAndroidProject) {
                    android {
                        publishLibraryVariants("release", "debug")
                    }

                    sourceSets {
                        androidMain { dependsOn(jvmMain) }
                        androidTest { dependsOn(jvmTest) }
                    }
                }

                // XXX: kotlinx-coroutines-test currently only supports the jvm target
                if (!isTestProject) {
                    // XXX: some targets aren't supported by kotlinx.coroutines, so they're commented out

                    js(BOTH) {
                        browser()
                        nodejs()
                    }
//                    wasm32()

                    ios()
                    tvos()
                    watchosArm64()
                    watchosArm32()
//                    watchosX64()
                    watchosX86()

                    macosX64()
                    linuxX64()
//                    linuxArm64()
//                    linuxArm32Hfp()
                    mingwX64()

                    sourceSets {
                        nonJvmMain { dependsOn(commonMain) }

                        jsMain { dependsOn(nonJvmMain) }
                        nativeMain { dependsOn(nonJvmMain) }

                        appleMobileMain { dependsOn(nativeMain) }
                        iosMain { dependsOn(appleMobileMain) }
                        tvosMain { dependsOn(appleMobileMain) }
                        watchosMain { dependsOn(appleMobileMain) }
                        watchosArm64Main { dependsOn(watchosMain) }
                        watchosArm32Main { dependsOn(watchosMain) }
                        watchosX86Main { dependsOn(watchosMain) }

                        desktopMain { dependsOn(nativeMain) }
                        linuxX64Main { dependsOn(desktopMain) }
                        macosX64Main { dependsOn(desktopMain) }
                        mingwX64Main { dependsOn(desktopMain) }
                    }
                }
            }
        }

        if (isAndroidProject) {
            androidLibrary()

            android {
                // Resolve build conflicts for test modules
                if (isTestProject) {
                    packagingOptions {
                        pickFirst 'META-INF/AL2.0'
                        pickFirst 'META-INF/LGPL2.1'
                    }
                }
            }

            apply from: "$rootDir/dependencies.gradle"
        }

        apply from: "$rootDir/dependencies.gradle"

        dependencies {
            commonMainApi platform(project(':reactivestate-bom'))
            commonMainApi 'org.jetbrains.kotlinx:kotlinx-coroutines-core'

            jvmTestImplementation "io.mockk:mockk:1.11.0"
            jvmTestImplementation "org.jetbrains.kotlin:kotlin-test-junit"
            jvmTestImplementation 'junit:junit:4.13.2'

            if (isAndroidProject) {
                androidMainApi 'androidx.appcompat:appcompat'
                androidMainApi 'androidx.core:core-ktx'
                androidMainApi "androidx.fragment:fragment-ktx"
                androidMainApi "androidx.lifecycle:lifecycle-runtime-ktx"
                androidMainApi 'androidx.lifecycle:lifecycle-viewmodel-ktx'

                androidTestImplementation "androidx.arch.core:core-testing:2.1.0"
                androidTestImplementation 'androidx.fragment:fragment-testing:1.3.3'
                androidTestImplementation 'androidx.test:core:1.3.0'
                androidTestImplementation 'androidx.test:core-ktx:1.3.0'
                androidTestImplementation 'androidx.test.ext:junit:1.1.2'
                androidTestImplementation 'androidx.test.ext:junit-ktx:1.1.2'
                androidTestImplementation 'org.robolectric:robolectric:4.5.1'
            }
        }

        apply from: "$rootDir/gradle/common/dokka.gradle"

        apply from: "$rootDir/gradle/common/coverage.gradle"
        trackCoverage(isOnCI)
    }

    apply from: "$rootDir/gradle/common/publish.gradle"
    publish(
        url: "https://s01.oss.sonatype.org/service/local/",
        username: publicationUsername,
        password: publicationPassword,
        repoUrl: "https://github.com/ensody/ReactiveState-Kotlin",
        pomAction: {
            description = "Easy reactive state management for Kotlin Multiplatform. No boilerplate. Compatible with Android."
            url = "https://ensody.github.io/ReactiveState-Kotlin/"
            licenses {
                license(LICENSE.APACHE2)
            }
            developers {
                developer {
                    id = "wkornewald"
                    name = "Waldemar Kornewald"
                    organization = "Ensody GmbH"
                    organizationUrl = "https://www.ensody.com"
                }
            }
        },
        isPlatformProject: isPlatformProject,
        sign: isOnCI,
    )
}

nexusPublishing {
    repositories {
        mavenCentral {
            nexusUrl = uri("https://s01.oss.sonatype.org/service/local/")
            snapshotRepositoryUrl = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
            username = publicationUsername
            password = publicationPassword
        }
    }
}
